// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"gyu-oj-backend/app/user/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CurrentUserReq  = pb.CurrentUserReq
	CurrentUserResp = pb.CurrentUserResp
	LoginReq        = pb.LoginReq
	LoginResp       = pb.LoginResp
	LogoutReq       = pb.LogoutReq
	LogoutResp      = pb.LogoutResp
	RegisterReq     = pb.RegisterReq
	RegisterResp    = pb.RegisterResp
	User            = pb.User
	UserVO          = pb.UserVO

	UserZrpcClient interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		CurrentUser(ctx context.Context, in *CurrentUserReq, opts ...grpc.CallOption) (*CurrentUserResp, error)
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	}

	defaultUserZrpcClient struct {
		cli zrpc.Client
	}
)

func NewUserZrpcClient(cli zrpc.Client) UserZrpcClient {
	return &defaultUserZrpcClient{
		cli: cli,
	}
}

func (m *defaultUserZrpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) CurrentUser(ctx context.Context, in *CurrentUserReq, opts ...grpc.CallOption) (*CurrentUserResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CurrentUser(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}
