// Code generated by goctl. DO NOT EDIT.
// Source: question.proto

package question

import (
	"context"

	"gyu-oj-backend/app/question/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	JudgeCase                    = pb.JudgeCase
	JudgeConfig                  = pb.JudgeConfig
	JudgeInfo                    = pb.JudgeInfo
	PageReq                      = pb.PageReq
	QuestionAddReq               = pb.QuestionAddReq
	QuestionAddResp              = pb.QuestionAddResp
	QuestionDeleteReq            = pb.QuestionDeleteReq
	QuestionDeleteResp           = pb.QuestionDeleteResp
	QuestionGetByIdReq           = pb.QuestionGetByIdReq
	QuestionGetByIdResp          = pb.QuestionGetByIdResp
	QuestionListByPageReq        = pb.QuestionListByPageReq
	QuestionListByPageResp       = pb.QuestionListByPageResp
	QuestionSubmitAddReq         = pb.QuestionSubmitAddReq
	QuestionSubmitAddResp        = pb.QuestionSubmitAddResp
	QuestionSubmitListByPageReq  = pb.QuestionSubmitListByPageReq
	QuestionSubmitListByPageResp = pb.QuestionSubmitListByPageResp
	QuestionSubmitVO             = pb.QuestionSubmitVO
	QuestionUpdateReq            = pb.QuestionUpdateReq
	QuestionUpdateResp           = pb.QuestionUpdateResp
	QuestionVO                   = pb.QuestionVO

	Question interface {
		AddQuestion(ctx context.Context, in *QuestionAddReq, opts ...grpc.CallOption) (*QuestionAddResp, error)
		UpdateQuestion(ctx context.Context, in *QuestionUpdateReq, opts ...grpc.CallOption) (*QuestionUpdateResp, error)
		DeleteQuestion(ctx context.Context, in *QuestionDeleteReq, opts ...grpc.CallOption) (*QuestionDeleteResp, error)
		GetQuestionById(ctx context.Context, in *QuestionGetByIdReq, opts ...grpc.CallOption) (*QuestionGetByIdResp, error)
		ListQuestionByPage(ctx context.Context, in *QuestionListByPageReq, opts ...grpc.CallOption) (*QuestionListByPageResp, error)
	}

	defaultQuestion struct {
		cli zrpc.Client
	}
)

func NewQuestion(cli zrpc.Client) Question {
	return &defaultQuestion{
		cli: cli,
	}
}

func (m *defaultQuestion) AddQuestion(ctx context.Context, in *QuestionAddReq, opts ...grpc.CallOption) (*QuestionAddResp, error) {
	client := pb.NewQuestionClient(m.cli.Conn())
	return client.AddQuestion(ctx, in, opts...)
}

func (m *defaultQuestion) UpdateQuestion(ctx context.Context, in *QuestionUpdateReq, opts ...grpc.CallOption) (*QuestionUpdateResp, error) {
	client := pb.NewQuestionClient(m.cli.Conn())
	return client.UpdateQuestion(ctx, in, opts...)
}

func (m *defaultQuestion) DeleteQuestion(ctx context.Context, in *QuestionDeleteReq, opts ...grpc.CallOption) (*QuestionDeleteResp, error) {
	client := pb.NewQuestionClient(m.cli.Conn())
	return client.DeleteQuestion(ctx, in, opts...)
}

func (m *defaultQuestion) GetQuestionById(ctx context.Context, in *QuestionGetByIdReq, opts ...grpc.CallOption) (*QuestionGetByIdResp, error) {
	client := pb.NewQuestionClient(m.cli.Conn())
	return client.GetQuestionById(ctx, in, opts...)
}

func (m *defaultQuestion) ListQuestionByPage(ctx context.Context, in *QuestionListByPageReq, opts ...grpc.CallOption) (*QuestionListByPageResp, error) {
	client := pb.NewQuestionClient(m.cli.Conn())
	return client.ListQuestionByPage(ctx, in, opts...)
}
