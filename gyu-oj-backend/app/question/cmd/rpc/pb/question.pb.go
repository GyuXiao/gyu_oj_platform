// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.1
// source: pb/question.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 判题样例
type JudgeCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *JudgeCase) Reset() {
	*x = JudgeCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeCase) ProtoMessage() {}

func (x *JudgeCase) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeCase.ProtoReflect.Descriptor instead.
func (*JudgeCase) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{0}
}

func (x *JudgeCase) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *JudgeCase) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// 判题配置
type JudgeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeLimit   int64 `protobuf:"varint,1,opt,name=timeLimit,proto3" json:"timeLimit,omitempty"`
	MemoryLimit int64 `protobuf:"varint,2,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`
}

func (x *JudgeConfig) Reset() {
	*x = JudgeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeConfig) ProtoMessage() {}

func (x *JudgeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeConfig.ProtoReflect.Descriptor instead.
func (*JudgeConfig) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{1}
}

func (x *JudgeConfig) GetTimeLimit() int64 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *JudgeConfig) GetMemoryLimit() int64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

// 分页请求默认字段
type PageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`
	PageSize  int64  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	SortField string `protobuf:"bytes,3,opt,name=sortField,proto3" json:"sortField,omitempty"`
	SortOrder string `protobuf:"bytes,4,opt,name=sortOrder,proto3" json:"sortOrder,omitempty"`
}

func (x *PageReq) Reset() {
	*x = PageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageReq) ProtoMessage() {}

func (x *PageReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageReq.ProtoReflect.Descriptor instead.
func (*PageReq) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{2}
}

func (x *PageReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PageReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageReq) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *PageReq) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

type QuestionVO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content     string       `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Tags        []string     `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Answer      string       `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	SubmitNum   int64        `protobuf:"varint,6,opt,name=submitNum,proto3" json:"submitNum,omitempty"`
	AcceptedNum int64        `protobuf:"varint,7,opt,name=acceptedNum,proto3" json:"acceptedNum,omitempty"`
	JudgeConfig *JudgeConfig `protobuf:"bytes,8,opt,name=judgeConfig,proto3" json:"judgeConfig,omitempty"`
	JudgeCase   []*JudgeCase `protobuf:"bytes,9,rep,name=judgeCase,proto3" json:"judgeCase,omitempty"`
	UserId      int64        `protobuf:"varint,10,opt,name=userId,proto3" json:"userId,omitempty"`
	CreateTime  int64        `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  int64        `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *QuestionVO) Reset() {
	*x = QuestionVO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionVO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionVO) ProtoMessage() {}

func (x *QuestionVO) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionVO.ProtoReflect.Descriptor instead.
func (*QuestionVO) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{3}
}

func (x *QuestionVO) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionVO) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionVO) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionVO) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QuestionVO) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionVO) GetSubmitNum() int64 {
	if x != nil {
		return x.SubmitNum
	}
	return 0
}

func (x *QuestionVO) GetAcceptedNum() int64 {
	if x != nil {
		return x.AcceptedNum
	}
	return 0
}

func (x *QuestionVO) GetJudgeConfig() *JudgeConfig {
	if x != nil {
		return x.JudgeConfig
	}
	return nil
}

func (x *QuestionVO) GetJudgeCase() []*JudgeCase {
	if x != nil {
		return x.JudgeCase
	}
	return nil
}

func (x *QuestionVO) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QuestionVO) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *QuestionVO) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 添加题目
type QuestionAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content     string       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Tags        []string     `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Answer      string       `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
	JudgeCase   []*JudgeCase `protobuf:"bytes,5,rep,name=judgeCase,proto3" json:"judgeCase,omitempty"`
	JudgeConfig *JudgeConfig `protobuf:"bytes,6,opt,name=judgeConfig,proto3" json:"judgeConfig,omitempty"`
	UserId      int64        `protobuf:"varint,7,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *QuestionAddReq) Reset() {
	*x = QuestionAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAddReq) ProtoMessage() {}

func (x *QuestionAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAddReq.ProtoReflect.Descriptor instead.
func (*QuestionAddReq) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{4}
}

func (x *QuestionAddReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionAddReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionAddReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QuestionAddReq) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionAddReq) GetJudgeCase() []*JudgeCase {
	if x != nil {
		return x.JudgeCase
	}
	return nil
}

func (x *QuestionAddReq) GetJudgeConfig() *JudgeConfig {
	if x != nil {
		return x.JudgeConfig
	}
	return nil
}

func (x *QuestionAddReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type QuestionAddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuestionAddResp) Reset() {
	*x = QuestionAddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionAddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAddResp) ProtoMessage() {}

func (x *QuestionAddResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAddResp.ProtoReflect.Descriptor instead.
func (*QuestionAddResp) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{5}
}

func (x *QuestionAddResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 更新题目
type QuestionUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content     string       `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Tags        []string     `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Answer      string       `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	JudgeCase   []*JudgeCase `protobuf:"bytes,6,rep,name=judgeCase,proto3" json:"judgeCase,omitempty"`
	JudgeConfig *JudgeConfig `protobuf:"bytes,7,opt,name=judgeConfig,proto3" json:"judgeConfig,omitempty"`
}

func (x *QuestionUpdateReq) Reset() {
	*x = QuestionUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionUpdateReq) ProtoMessage() {}

func (x *QuestionUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionUpdateReq.ProtoReflect.Descriptor instead.
func (*QuestionUpdateReq) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{6}
}

func (x *QuestionUpdateReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionUpdateReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionUpdateReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *QuestionUpdateReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *QuestionUpdateReq) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionUpdateReq) GetJudgeCase() []*JudgeCase {
	if x != nil {
		return x.JudgeCase
	}
	return nil
}

func (x *QuestionUpdateReq) GetJudgeConfig() *JudgeConfig {
	if x != nil {
		return x.JudgeConfig
	}
	return nil
}

type QuestionUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateOK bool `protobuf:"varint,1,opt,name=updateOK,proto3" json:"updateOK,omitempty"`
}

func (x *QuestionUpdateResp) Reset() {
	*x = QuestionUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionUpdateResp) ProtoMessage() {}

func (x *QuestionUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionUpdateResp.ProtoReflect.Descriptor instead.
func (*QuestionUpdateResp) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{7}
}

func (x *QuestionUpdateResp) GetUpdateOK() bool {
	if x != nil {
		return x.UpdateOK
	}
	return false
}

// 删除题目
type QuestionDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuestionDeleteReq) Reset() {
	*x = QuestionDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionDeleteReq) ProtoMessage() {}

func (x *QuestionDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionDeleteReq.ProtoReflect.Descriptor instead.
func (*QuestionDeleteReq) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{8}
}

func (x *QuestionDeleteReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QuestionDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteOK bool `protobuf:"varint,1,opt,name=deleteOK,proto3" json:"deleteOK,omitempty"`
}

func (x *QuestionDeleteResp) Reset() {
	*x = QuestionDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionDeleteResp) ProtoMessage() {}

func (x *QuestionDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionDeleteResp.ProtoReflect.Descriptor instead.
func (*QuestionDeleteResp) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{9}
}

func (x *QuestionDeleteResp) GetDeleteOK() bool {
	if x != nil {
		return x.DeleteOK
	}
	return false
}

// 根据 id 查询题目
type QuestionGetByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuestionGetByIdReq) Reset() {
	*x = QuestionGetByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionGetByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionGetByIdReq) ProtoMessage() {}

func (x *QuestionGetByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionGetByIdReq.ProtoReflect.Descriptor instead.
func (*QuestionGetByIdReq) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{10}
}

func (x *QuestionGetByIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QuestionGetByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionVO *QuestionVO `protobuf:"bytes,1,opt,name=questionVO,proto3" json:"questionVO,omitempty"`
}

func (x *QuestionGetByIdResp) Reset() {
	*x = QuestionGetByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionGetByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionGetByIdResp) ProtoMessage() {}

func (x *QuestionGetByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionGetByIdResp.ProtoReflect.Descriptor instead.
func (*QuestionGetByIdResp) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{11}
}

func (x *QuestionGetByIdResp) GetQuestionVO() *QuestionVO {
	if x != nil {
		return x.QuestionVO
	}
	return nil
}

// 分页查询题目
type QuestionListByPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageReq *PageReq `protobuf:"bytes,1,opt,name=pageReq,proto3" json:"pageReq,omitempty"`
	Title   string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Tags    []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *QuestionListByPageReq) Reset() {
	*x = QuestionListByPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionListByPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionListByPageReq) ProtoMessage() {}

func (x *QuestionListByPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionListByPageReq.ProtoReflect.Descriptor instead.
func (*QuestionListByPageReq) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{12}
}

func (x *QuestionListByPageReq) GetPageReq() *PageReq {
	if x != nil {
		return x.PageReq
	}
	return nil
}

func (x *QuestionListByPageReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QuestionListByPageReq) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type QuestionListByPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionVOList []*QuestionVO `protobuf:"bytes,1,rep,name=questionVOList,proto3" json:"questionVOList,omitempty"`
	TotalNum       int64         `protobuf:"varint,2,opt,name=totalNum,proto3" json:"totalNum,omitempty"`
}

func (x *QuestionListByPageResp) Reset() {
	*x = QuestionListByPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionListByPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionListByPageResp) ProtoMessage() {}

func (x *QuestionListByPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionListByPageResp.ProtoReflect.Descriptor instead.
func (*QuestionListByPageResp) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{13}
}

func (x *QuestionListByPageResp) GetQuestionVOList() []*QuestionVO {
	if x != nil {
		return x.QuestionVOList
	}
	return nil
}

func (x *QuestionListByPageResp) GetTotalNum() int64 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

type JudgeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Time    int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Memory  int64  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *JudgeInfo) Reset() {
	*x = JudgeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JudgeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JudgeInfo) ProtoMessage() {}

func (x *JudgeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JudgeInfo.ProtoReflect.Descriptor instead.
func (*JudgeInfo) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{14}
}

func (x *JudgeInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *JudgeInfo) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *JudgeInfo) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type QuestionSubmitVO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Language   string     `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	SubmitCode string     `protobuf:"bytes,3,opt,name=submitCode,proto3" json:"submitCode,omitempty"`
	JudgeInfo  *JudgeInfo `protobuf:"bytes,4,opt,name=judgeInfo,proto3" json:"judgeInfo,omitempty"`
	Status     int64      `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	QuestionId string     `protobuf:"bytes,6,opt,name=questionId,proto3" json:"questionId,omitempty"`
	UserId     int64      `protobuf:"varint,7,opt,name=userId,proto3" json:"userId,omitempty"`
	CreateTime int64      `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime int64      `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *QuestionSubmitVO) Reset() {
	*x = QuestionSubmitVO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSubmitVO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSubmitVO) ProtoMessage() {}

func (x *QuestionSubmitVO) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSubmitVO.ProtoReflect.Descriptor instead.
func (*QuestionSubmitVO) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{15}
}

func (x *QuestionSubmitVO) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionSubmitVO) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *QuestionSubmitVO) GetSubmitCode() string {
	if x != nil {
		return x.SubmitCode
	}
	return ""
}

func (x *QuestionSubmitVO) GetJudgeInfo() *JudgeInfo {
	if x != nil {
		return x.JudgeInfo
	}
	return nil
}

func (x *QuestionSubmitVO) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuestionSubmitVO) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionSubmitVO) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QuestionSubmitVO) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *QuestionSubmitVO) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type QuestionSubmitAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language   string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	SubmitCode string `protobuf:"bytes,2,opt,name=submitCode,proto3" json:"submitCode,omitempty"`
	QuestionId string `protobuf:"bytes,3,opt,name=questionId,proto3" json:"questionId,omitempty"`
	UserId     int64  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *QuestionSubmitAddReq) Reset() {
	*x = QuestionSubmitAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSubmitAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSubmitAddReq) ProtoMessage() {}

func (x *QuestionSubmitAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSubmitAddReq.ProtoReflect.Descriptor instead.
func (*QuestionSubmitAddReq) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{16}
}

func (x *QuestionSubmitAddReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *QuestionSubmitAddReq) GetSubmitCode() string {
	if x != nil {
		return x.SubmitCode
	}
	return ""
}

func (x *QuestionSubmitAddReq) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionSubmitAddReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type QuestionSubmitAddResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuestionSubmitAddResp) Reset() {
	*x = QuestionSubmitAddResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSubmitAddResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSubmitAddResp) ProtoMessage() {}

func (x *QuestionSubmitAddResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSubmitAddResp.ProtoReflect.Descriptor instead.
func (*QuestionSubmitAddResp) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{17}
}

func (x *QuestionSubmitAddResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QuestionSubmitListByPageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language   string   `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	QuestionId string   `protobuf:"bytes,2,opt,name=questionId,proto3" json:"questionId,omitempty"` // questionId 是 snoyflake 算法生成的，如果定义为 int64 类型可能会出现精度丢失问题
	Status     int64    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	UserId     int64    `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	PageReq    *PageReq `protobuf:"bytes,5,opt,name=pageReq,proto3" json:"pageReq,omitempty"`
}

func (x *QuestionSubmitListByPageReq) Reset() {
	*x = QuestionSubmitListByPageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSubmitListByPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSubmitListByPageReq) ProtoMessage() {}

func (x *QuestionSubmitListByPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSubmitListByPageReq.ProtoReflect.Descriptor instead.
func (*QuestionSubmitListByPageReq) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{18}
}

func (x *QuestionSubmitListByPageReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *QuestionSubmitListByPageReq) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionSubmitListByPageReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuestionSubmitListByPageReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QuestionSubmitListByPageReq) GetPageReq() *PageReq {
	if x != nil {
		return x.PageReq
	}
	return nil
}

type QuestionSubmitListByPageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionSubmitVOList []*QuestionSubmitVO `protobuf:"bytes,1,rep,name=questionSubmitVOList,proto3" json:"questionSubmitVOList,omitempty"`
	TotalNum             int64               `protobuf:"varint,2,opt,name=totalNum,proto3" json:"totalNum,omitempty"`
}

func (x *QuestionSubmitListByPageResp) Reset() {
	*x = QuestionSubmitListByPageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSubmitListByPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSubmitListByPageResp) ProtoMessage() {}

func (x *QuestionSubmitListByPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSubmitListByPageResp.ProtoReflect.Descriptor instead.
func (*QuestionSubmitListByPageResp) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{19}
}

func (x *QuestionSubmitListByPageResp) GetQuestionSubmitVOList() []*QuestionSubmitVO {
	if x != nil {
		return x.QuestionSubmitVOList
	}
	return nil
}

func (x *QuestionSubmitListByPageResp) GetTotalNum() int64 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

type QuestionSubmitQueryByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QuestionSubmitQueryByIdReq) Reset() {
	*x = QuestionSubmitQueryByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSubmitQueryByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSubmitQueryByIdReq) ProtoMessage() {}

func (x *QuestionSubmitQueryByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSubmitQueryByIdReq.ProtoReflect.Descriptor instead.
func (*QuestionSubmitQueryByIdReq) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{20}
}

func (x *QuestionSubmitQueryByIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QuestionSubmitQueryByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionSubmitVO *QuestionSubmitVO `protobuf:"bytes,1,opt,name=questionSubmitVO,proto3" json:"questionSubmitVO,omitempty"`
}

func (x *QuestionSubmitQueryByIdResp) Reset() {
	*x = QuestionSubmitQueryByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSubmitQueryByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSubmitQueryByIdResp) ProtoMessage() {}

func (x *QuestionSubmitQueryByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSubmitQueryByIdResp.ProtoReflect.Descriptor instead.
func (*QuestionSubmitQueryByIdResp) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{21}
}

func (x *QuestionSubmitQueryByIdResp) GetQuestionSubmitVO() *QuestionSubmitVO {
	if x != nil {
		return x.QuestionSubmitVO
	}
	return nil
}

type QuestionSubmitUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JudgeInfo *JudgeInfo `protobuf:"bytes,2,opt,name=judgeInfo,proto3" json:"judgeInfo,omitempty"`
	Status    int64      `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *QuestionSubmitUpdateReq) Reset() {
	*x = QuestionSubmitUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSubmitUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSubmitUpdateReq) ProtoMessage() {}

func (x *QuestionSubmitUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSubmitUpdateReq.ProtoReflect.Descriptor instead.
func (*QuestionSubmitUpdateReq) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{22}
}

func (x *QuestionSubmitUpdateReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionSubmitUpdateReq) GetJudgeInfo() *JudgeInfo {
	if x != nil {
		return x.JudgeInfo
	}
	return nil
}

func (x *QuestionSubmitUpdateReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type QuestionSubmitUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateOK bool `protobuf:"varint,1,opt,name=updateOK,proto3" json:"updateOK,omitempty"`
}

func (x *QuestionSubmitUpdateResp) Reset() {
	*x = QuestionSubmitUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_question_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionSubmitUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionSubmitUpdateResp) ProtoMessage() {}

func (x *QuestionSubmitUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_question_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionSubmitUpdateResp.ProtoReflect.Descriptor instead.
func (*QuestionSubmitUpdateResp) Descriptor() ([]byte, []int) {
	return file_pb_question_proto_rawDescGZIP(), []int{23}
}

func (x *QuestionSubmitUpdateResp) GetUpdateOK() bool {
	if x != nil {
		return x.UpdateOK
	}
	return false
}

var File_pb_question_proto protoreflect.FileDescriptor

var file_pb_question_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x62, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x39, 0x0a, 0x09, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x4d, 0x0a, 0x0b, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x7b, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xf0,
	0x02, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x0b, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x09,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x09,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x11,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x30, 0x0a,
	0x12, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x4b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x4b, 0x22,
	0x23, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x4b, 0x22, 0x24, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x13,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x4f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x4f, 0x22, 0x68, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x6c, 0x0a,
	0x16, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x52,
	0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x4f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x51, 0x0a, 0x09, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x9b,
	0x02, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x56, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a,
	0x14, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x4f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x4f, 0x52, 0x14, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x4f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x2c, 0x0a, 0x1a,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x1b, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x10, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x4f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x4f, 0x52, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x4f, 0x22, 0x6e, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4a,
	0x75, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x18, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x4b, 0x32, 0xd5, 0x02, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x62,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x67, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e,
	0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b,
	0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x32, 0xe6, 0x02, 0x0a, 0x0e,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x47,
	0x0a, 0x10, 0x64, 0x6f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x1f,
	0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x5a, 0x0a, 0x17, 0x71, 0x75, 0x65, 0x72, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x2e, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a,
	0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_question_proto_rawDescOnce sync.Once
	file_pb_question_proto_rawDescData = file_pb_question_proto_rawDesc
)

func file_pb_question_proto_rawDescGZIP() []byte {
	file_pb_question_proto_rawDescOnce.Do(func() {
		file_pb_question_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_question_proto_rawDescData)
	})
	return file_pb_question_proto_rawDescData
}

var file_pb_question_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_pb_question_proto_goTypes = []interface{}{
	(*JudgeCase)(nil),                    // 0: pb.JudgeCase
	(*JudgeConfig)(nil),                  // 1: pb.JudgeConfig
	(*PageReq)(nil),                      // 2: pb.PageReq
	(*QuestionVO)(nil),                   // 3: pb.QuestionVO
	(*QuestionAddReq)(nil),               // 4: pb.QuestionAddReq
	(*QuestionAddResp)(nil),              // 5: pb.QuestionAddResp
	(*QuestionUpdateReq)(nil),            // 6: pb.QuestionUpdateReq
	(*QuestionUpdateResp)(nil),           // 7: pb.QuestionUpdateResp
	(*QuestionDeleteReq)(nil),            // 8: pb.QuestionDeleteReq
	(*QuestionDeleteResp)(nil),           // 9: pb.QuestionDeleteResp
	(*QuestionGetByIdReq)(nil),           // 10: pb.QuestionGetByIdReq
	(*QuestionGetByIdResp)(nil),          // 11: pb.QuestionGetByIdResp
	(*QuestionListByPageReq)(nil),        // 12: pb.QuestionListByPageReq
	(*QuestionListByPageResp)(nil),       // 13: pb.QuestionListByPageResp
	(*JudgeInfo)(nil),                    // 14: pb.JudgeInfo
	(*QuestionSubmitVO)(nil),             // 15: pb.QuestionSubmitVO
	(*QuestionSubmitAddReq)(nil),         // 16: pb.QuestionSubmitAddReq
	(*QuestionSubmitAddResp)(nil),        // 17: pb.QuestionSubmitAddResp
	(*QuestionSubmitListByPageReq)(nil),  // 18: pb.QuestionSubmitListByPageReq
	(*QuestionSubmitListByPageResp)(nil), // 19: pb.QuestionSubmitListByPageResp
	(*QuestionSubmitQueryByIdReq)(nil),   // 20: pb.QuestionSubmitQueryByIdReq
	(*QuestionSubmitQueryByIdResp)(nil),  // 21: pb.QuestionSubmitQueryByIdResp
	(*QuestionSubmitUpdateReq)(nil),      // 22: pb.QuestionSubmitUpdateReq
	(*QuestionSubmitUpdateResp)(nil),     // 23: pb.QuestionSubmitUpdateResp
}
var file_pb_question_proto_depIdxs = []int32{
	1,  // 0: pb.QuestionVO.judgeConfig:type_name -> pb.JudgeConfig
	0,  // 1: pb.QuestionVO.judgeCase:type_name -> pb.JudgeCase
	0,  // 2: pb.QuestionAddReq.judgeCase:type_name -> pb.JudgeCase
	1,  // 3: pb.QuestionAddReq.judgeConfig:type_name -> pb.JudgeConfig
	0,  // 4: pb.QuestionUpdateReq.judgeCase:type_name -> pb.JudgeCase
	1,  // 5: pb.QuestionUpdateReq.judgeConfig:type_name -> pb.JudgeConfig
	3,  // 6: pb.QuestionGetByIdResp.questionVO:type_name -> pb.QuestionVO
	2,  // 7: pb.QuestionListByPageReq.pageReq:type_name -> pb.PageReq
	3,  // 8: pb.QuestionListByPageResp.questionVOList:type_name -> pb.QuestionVO
	14, // 9: pb.QuestionSubmitVO.judgeInfo:type_name -> pb.JudgeInfo
	2,  // 10: pb.QuestionSubmitListByPageReq.pageReq:type_name -> pb.PageReq
	15, // 11: pb.QuestionSubmitListByPageResp.questionSubmitVOList:type_name -> pb.QuestionSubmitVO
	15, // 12: pb.QuestionSubmitQueryByIdResp.questionSubmitVO:type_name -> pb.QuestionSubmitVO
	14, // 13: pb.QuestionSubmitUpdateReq.judgeInfo:type_name -> pb.JudgeInfo
	4,  // 14: pb.question.addQuestion:input_type -> pb.QuestionAddReq
	6,  // 15: pb.question.updateQuestion:input_type -> pb.QuestionUpdateReq
	8,  // 16: pb.question.deleteQuestion:input_type -> pb.QuestionDeleteReq
	10, // 17: pb.question.getQuestionById:input_type -> pb.QuestionGetByIdReq
	12, // 18: pb.question.listQuestionByPage:input_type -> pb.QuestionListByPageReq
	16, // 19: pb.questionSubmit.doQuestionSubmit:input_type -> pb.QuestionSubmitAddReq
	18, // 20: pb.questionSubmit.queryQuestionSubmit:input_type -> pb.QuestionSubmitListByPageReq
	20, // 21: pb.questionSubmit.queryQuestionSubmitById:input_type -> pb.QuestionSubmitQueryByIdReq
	22, // 22: pb.questionSubmit.updateQuestionSubmitById:input_type -> pb.QuestionSubmitUpdateReq
	5,  // 23: pb.question.addQuestion:output_type -> pb.QuestionAddResp
	7,  // 24: pb.question.updateQuestion:output_type -> pb.QuestionUpdateResp
	9,  // 25: pb.question.deleteQuestion:output_type -> pb.QuestionDeleteResp
	11, // 26: pb.question.getQuestionById:output_type -> pb.QuestionGetByIdResp
	13, // 27: pb.question.listQuestionByPage:output_type -> pb.QuestionListByPageResp
	17, // 28: pb.questionSubmit.doQuestionSubmit:output_type -> pb.QuestionSubmitAddResp
	19, // 29: pb.questionSubmit.queryQuestionSubmit:output_type -> pb.QuestionSubmitListByPageResp
	21, // 30: pb.questionSubmit.queryQuestionSubmitById:output_type -> pb.QuestionSubmitQueryByIdResp
	23, // 31: pb.questionSubmit.updateQuestionSubmitById:output_type -> pb.QuestionSubmitUpdateResp
	23, // [23:32] is the sub-list for method output_type
	14, // [14:23] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pb_question_proto_init() }
func file_pb_question_proto_init() {
	if File_pb_question_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_question_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionVO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionAddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionGetByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionGetByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionListByPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionListByPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JudgeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSubmitVO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSubmitAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSubmitAddResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSubmitListByPageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSubmitListByPageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSubmitQueryByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSubmitQueryByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSubmitUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_question_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionSubmitUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_question_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pb_question_proto_goTypes,
		DependencyIndexes: file_pb_question_proto_depIdxs,
		MessageInfos:      file_pb_question_proto_msgTypes,
	}.Build()
	File_pb_question_proto = out.File
	file_pb_question_proto_rawDesc = nil
	file_pb_question_proto_goTypes = nil
	file_pb_question_proto_depIdxs = nil
}
