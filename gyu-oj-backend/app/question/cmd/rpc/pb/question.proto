syntax = "proto3";

option go_package = "./pb";

package pb;

// 判题样例
message JudgeCase {
  string input = 1;
  string output = 2;
}

// 判题配置
message JudgeConfig {
  int64 timeLimit = 1;
  int64 memoryLimit = 2;
}

// 分页请求默认字段
message PageReq {
  int64 current = 1;
  int64 pageSize = 2;
  string sortField = 3;
  string sortOrder = 4;
}

// 题目模块

message QuestionVO {
  string id = 1;
  string title = 2;
  string content = 3;
  repeated string tags = 4;
  string answer = 5;
  int64 submitNum = 6;
  int64 acceptedNum  = 7;
  JudgeConfig judgeConfig = 8;
  repeated JudgeCase judgeCase = 9;
  int64 userId = 10;
  int64 createTime = 11;
  int64 updateTime = 12;
}

// 添加题目
message QuestionAddReq {
  string title = 1;
  string content = 2;
  repeated string tags = 3;
  string answer = 4;
  repeated JudgeCase judgeCase = 5;
  JudgeConfig judgeConfig = 6;
  int64 userId = 7;
}
message QuestionAddResp {
  string id = 1;
}

// 更新题目
message QuestionUpdateReq {
  string id = 1;
  string title = 2;
  string content = 3;
  repeated string tags = 4;
  string answer = 5;
  repeated JudgeCase judgeCase = 6;
  JudgeConfig judgeConfig = 7;
}
message QuestionUpdateResp {
  bool updateOK = 1;
}

// 删除题目
message QuestionDeleteReq {
  string id = 1;
}
message QuestionDeleteResp {
  bool deleteOK = 1;
}

// 根据 id 查询题目
message QuestionGetByIdReq {
  string id = 1;
}
message QuestionGetByIdResp {
  QuestionVO questionVO = 1;
}

// 分页查询题目
message QuestionListByPageReq {
  PageReq pageReq = 1;
  string title = 2;
  repeated string tags = 3;
}
message QuestionListByPageResp {
  repeated QuestionVO questionVOList = 1;
  int64 totalNum = 2;
}

// 题目服务
service question {
  rpc addQuestion(QuestionAddReq) returns(QuestionAddResp);
  rpc updateQuestion(QuestionUpdateReq) returns(QuestionUpdateResp);
  rpc deleteQuestion(QuestionDeleteReq) returns(QuestionDeleteResp);
  rpc getQuestionById(QuestionGetByIdReq) returns(QuestionGetByIdResp);
  rpc listQuestionByPage(QuestionListByPageReq) returns(QuestionListByPageResp);
}

// 题目提交模块

message JudgeInfo {
  string message = 1;
  int64 time = 2;
  int64 memory = 3;
}

message QuestionSubmitVO {
  string id = 1;
  string language = 2;
  string submitCode = 3;
  JudgeInfo judgeInfo = 4;
  int64 status = 5;
  string questionId = 6;
  int64 userId = 7;
  int64 createTime = 8;
  int64 updateTime = 9;
}

message QuestionSubmitAddReq {
  string language = 1;
  string submitCode = 2;
  string questionId = 3;
  int64 userId = 4;
}
message QuestionSubmitAddResp {
  string id = 1;
}

message QuestionSubmitListByPageReq {
  string language = 1;
  string questionId = 2; // questionId 是 snoyflake 算法生成的，如果定义为 int64 类型可能会出现精度丢失问题
  int64 status = 3;
  int64 userId = 4;
  PageReq pageReq = 5;
}

message QuestionSubmitListByPageResp {
  repeated QuestionSubmitVO questionSubmitVOList = 1;
  int64 totalNum = 2;
}

message QuestionSubmitQueryByIdReq {
  string id = 1;
}

message QuestionSubmitQueryByIdResp {
  QuestionSubmitVO questionSubmitVO = 1;
}

message QuestionSubmitUpdateReq {
  string id = 1;
  JudgeInfo judgeInfo = 2;
  int64 status = 3;
}

message QuestionSubmitUpdateResp {
  bool updateOK = 1;
}

service questionSubmit {
  rpc doQuestionSubmit(QuestionSubmitAddReq) returns(QuestionSubmitAddResp);
  rpc queryQuestionSubmit(QuestionSubmitListByPageReq) returns(QuestionSubmitListByPageResp);
  rpc queryQuestionSubmitById(QuestionSubmitQueryByIdReq) returns(QuestionSubmitQueryByIdResp);
  rpc updateQuestionSubmitById(QuestionSubmitUpdateReq) returns(QuestionSubmitUpdateResp);
}

// 在 rpc 目录下执行
// goctl rpc protoc ./pb/question.proto --go_out=. --go-grpc_out=. --zrpc_out=. -m