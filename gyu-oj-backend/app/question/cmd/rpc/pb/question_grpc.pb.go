// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: pb/question.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Question_AddQuestion_FullMethodName        = "/pb.question/addQuestion"
	Question_UpdateQuestion_FullMethodName     = "/pb.question/updateQuestion"
	Question_DeleteQuestion_FullMethodName     = "/pb.question/deleteQuestion"
	Question_GetQuestionById_FullMethodName    = "/pb.question/getQuestionById"
	Question_ListQuestionByPage_FullMethodName = "/pb.question/listQuestionByPage"
)

// QuestionClient is the client API for Question service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionClient interface {
	AddQuestion(ctx context.Context, in *QuestionAddReq, opts ...grpc.CallOption) (*QuestionAddResp, error)
	UpdateQuestion(ctx context.Context, in *QuestionUpdateReq, opts ...grpc.CallOption) (*QuestionUpdateResp, error)
	DeleteQuestion(ctx context.Context, in *QuestionDeleteReq, opts ...grpc.CallOption) (*QuestionDeleteResp, error)
	GetQuestionById(ctx context.Context, in *QuestionGetByIdReq, opts ...grpc.CallOption) (*QuestionGetByIdResp, error)
	ListQuestionByPage(ctx context.Context, in *QuestionListByPageReq, opts ...grpc.CallOption) (*QuestionListByPageResp, error)
}

type questionClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionClient(cc grpc.ClientConnInterface) QuestionClient {
	return &questionClient{cc}
}

func (c *questionClient) AddQuestion(ctx context.Context, in *QuestionAddReq, opts ...grpc.CallOption) (*QuestionAddResp, error) {
	out := new(QuestionAddResp)
	err := c.cc.Invoke(ctx, Question_AddQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) UpdateQuestion(ctx context.Context, in *QuestionUpdateReq, opts ...grpc.CallOption) (*QuestionUpdateResp, error) {
	out := new(QuestionUpdateResp)
	err := c.cc.Invoke(ctx, Question_UpdateQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) DeleteQuestion(ctx context.Context, in *QuestionDeleteReq, opts ...grpc.CallOption) (*QuestionDeleteResp, error) {
	out := new(QuestionDeleteResp)
	err := c.cc.Invoke(ctx, Question_DeleteQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) GetQuestionById(ctx context.Context, in *QuestionGetByIdReq, opts ...grpc.CallOption) (*QuestionGetByIdResp, error) {
	out := new(QuestionGetByIdResp)
	err := c.cc.Invoke(ctx, Question_GetQuestionById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) ListQuestionByPage(ctx context.Context, in *QuestionListByPageReq, opts ...grpc.CallOption) (*QuestionListByPageResp, error) {
	out := new(QuestionListByPageResp)
	err := c.cc.Invoke(ctx, Question_ListQuestionByPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServer is the server API for Question service.
// All implementations must embed UnimplementedQuestionServer
// for forward compatibility
type QuestionServer interface {
	AddQuestion(context.Context, *QuestionAddReq) (*QuestionAddResp, error)
	UpdateQuestion(context.Context, *QuestionUpdateReq) (*QuestionUpdateResp, error)
	DeleteQuestion(context.Context, *QuestionDeleteReq) (*QuestionDeleteResp, error)
	GetQuestionById(context.Context, *QuestionGetByIdReq) (*QuestionGetByIdResp, error)
	ListQuestionByPage(context.Context, *QuestionListByPageReq) (*QuestionListByPageResp, error)
	mustEmbedUnimplementedQuestionServer()
}

// UnimplementedQuestionServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionServer struct {
}

func (UnimplementedQuestionServer) AddQuestion(context.Context, *QuestionAddReq) (*QuestionAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestion not implemented")
}
func (UnimplementedQuestionServer) UpdateQuestion(context.Context, *QuestionUpdateReq) (*QuestionUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuestionServer) DeleteQuestion(context.Context, *QuestionDeleteReq) (*QuestionDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuestionServer) GetQuestionById(context.Context, *QuestionGetByIdReq) (*QuestionGetByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionById not implemented")
}
func (UnimplementedQuestionServer) ListQuestionByPage(context.Context, *QuestionListByPageReq) (*QuestionListByPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestionByPage not implemented")
}
func (UnimplementedQuestionServer) mustEmbedUnimplementedQuestionServer() {}

// UnsafeQuestionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServer will
// result in compilation errors.
type UnsafeQuestionServer interface {
	mustEmbedUnimplementedQuestionServer()
}

func RegisterQuestionServer(s grpc.ServiceRegistrar, srv QuestionServer) {
	s.RegisterService(&Question_ServiceDesc, srv)
}

func _Question_AddQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).AddQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_AddQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).AddQuestion(ctx, req.(*QuestionAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).UpdateQuestion(ctx, req.(*QuestionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).DeleteQuestion(ctx, req.(*QuestionDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_GetQuestionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionGetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).GetQuestionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_GetQuestionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).GetQuestionById(ctx, req.(*QuestionGetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_ListQuestionByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionListByPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).ListQuestionByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_ListQuestionByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).ListQuestionByPage(ctx, req.(*QuestionListByPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Question_ServiceDesc is the grpc.ServiceDesc for Question service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Question_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.question",
	HandlerType: (*QuestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addQuestion",
			Handler:    _Question_AddQuestion_Handler,
		},
		{
			MethodName: "updateQuestion",
			Handler:    _Question_UpdateQuestion_Handler,
		},
		{
			MethodName: "deleteQuestion",
			Handler:    _Question_DeleteQuestion_Handler,
		},
		{
			MethodName: "getQuestionById",
			Handler:    _Question_GetQuestionById_Handler,
		},
		{
			MethodName: "listQuestionByPage",
			Handler:    _Question_ListQuestionByPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/question.proto",
}

const (
	QuestionSubmit_DoQuestionSubmit_FullMethodName         = "/pb.questionSubmit/doQuestionSubmit"
	QuestionSubmit_QueryQuestionSubmit_FullMethodName      = "/pb.questionSubmit/queryQuestionSubmit"
	QuestionSubmit_QueryQuestionSubmitById_FullMethodName  = "/pb.questionSubmit/queryQuestionSubmitById"
	QuestionSubmit_UpdateQuestionSubmitById_FullMethodName = "/pb.questionSubmit/updateQuestionSubmitById"
)

// QuestionSubmitClient is the client API for QuestionSubmit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionSubmitClient interface {
	DoQuestionSubmit(ctx context.Context, in *QuestionSubmitAddReq, opts ...grpc.CallOption) (*QuestionSubmitAddResp, error)
	QueryQuestionSubmit(ctx context.Context, in *QuestionSubmitListByPageReq, opts ...grpc.CallOption) (*QuestionSubmitListByPageResp, error)
	QueryQuestionSubmitById(ctx context.Context, in *QuestionSubmitQueryByIdReq, opts ...grpc.CallOption) (*QuestionSubmitQueryByIdResp, error)
	UpdateQuestionSubmitById(ctx context.Context, in *QuestionSubmitUpdateReq, opts ...grpc.CallOption) (*QuestionSubmitUpdateResp, error)
}

type questionSubmitClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionSubmitClient(cc grpc.ClientConnInterface) QuestionSubmitClient {
	return &questionSubmitClient{cc}
}

func (c *questionSubmitClient) DoQuestionSubmit(ctx context.Context, in *QuestionSubmitAddReq, opts ...grpc.CallOption) (*QuestionSubmitAddResp, error) {
	out := new(QuestionSubmitAddResp)
	err := c.cc.Invoke(ctx, QuestionSubmit_DoQuestionSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionSubmitClient) QueryQuestionSubmit(ctx context.Context, in *QuestionSubmitListByPageReq, opts ...grpc.CallOption) (*QuestionSubmitListByPageResp, error) {
	out := new(QuestionSubmitListByPageResp)
	err := c.cc.Invoke(ctx, QuestionSubmit_QueryQuestionSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionSubmitClient) QueryQuestionSubmitById(ctx context.Context, in *QuestionSubmitQueryByIdReq, opts ...grpc.CallOption) (*QuestionSubmitQueryByIdResp, error) {
	out := new(QuestionSubmitQueryByIdResp)
	err := c.cc.Invoke(ctx, QuestionSubmit_QueryQuestionSubmitById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionSubmitClient) UpdateQuestionSubmitById(ctx context.Context, in *QuestionSubmitUpdateReq, opts ...grpc.CallOption) (*QuestionSubmitUpdateResp, error) {
	out := new(QuestionSubmitUpdateResp)
	err := c.cc.Invoke(ctx, QuestionSubmit_UpdateQuestionSubmitById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionSubmitServer is the server API for QuestionSubmit service.
// All implementations must embed UnimplementedQuestionSubmitServer
// for forward compatibility
type QuestionSubmitServer interface {
	DoQuestionSubmit(context.Context, *QuestionSubmitAddReq) (*QuestionSubmitAddResp, error)
	QueryQuestionSubmit(context.Context, *QuestionSubmitListByPageReq) (*QuestionSubmitListByPageResp, error)
	QueryQuestionSubmitById(context.Context, *QuestionSubmitQueryByIdReq) (*QuestionSubmitQueryByIdResp, error)
	UpdateQuestionSubmitById(context.Context, *QuestionSubmitUpdateReq) (*QuestionSubmitUpdateResp, error)
	mustEmbedUnimplementedQuestionSubmitServer()
}

// UnimplementedQuestionSubmitServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionSubmitServer struct {
}

func (UnimplementedQuestionSubmitServer) DoQuestionSubmit(context.Context, *QuestionSubmitAddReq) (*QuestionSubmitAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoQuestionSubmit not implemented")
}
func (UnimplementedQuestionSubmitServer) QueryQuestionSubmit(context.Context, *QuestionSubmitListByPageReq) (*QuestionSubmitListByPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryQuestionSubmit not implemented")
}
func (UnimplementedQuestionSubmitServer) QueryQuestionSubmitById(context.Context, *QuestionSubmitQueryByIdReq) (*QuestionSubmitQueryByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryQuestionSubmitById not implemented")
}
func (UnimplementedQuestionSubmitServer) UpdateQuestionSubmitById(context.Context, *QuestionSubmitUpdateReq) (*QuestionSubmitUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionSubmitById not implemented")
}
func (UnimplementedQuestionSubmitServer) mustEmbedUnimplementedQuestionSubmitServer() {}

// UnsafeQuestionSubmitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionSubmitServer will
// result in compilation errors.
type UnsafeQuestionSubmitServer interface {
	mustEmbedUnimplementedQuestionSubmitServer()
}

func RegisterQuestionSubmitServer(s grpc.ServiceRegistrar, srv QuestionSubmitServer) {
	s.RegisterService(&QuestionSubmit_ServiceDesc, srv)
}

func _QuestionSubmit_DoQuestionSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionSubmitAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionSubmitServer).DoQuestionSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionSubmit_DoQuestionSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionSubmitServer).DoQuestionSubmit(ctx, req.(*QuestionSubmitAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionSubmit_QueryQuestionSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionSubmitListByPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionSubmitServer).QueryQuestionSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionSubmit_QueryQuestionSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionSubmitServer).QueryQuestionSubmit(ctx, req.(*QuestionSubmitListByPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionSubmit_QueryQuestionSubmitById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionSubmitQueryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionSubmitServer).QueryQuestionSubmitById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionSubmit_QueryQuestionSubmitById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionSubmitServer).QueryQuestionSubmitById(ctx, req.(*QuestionSubmitQueryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionSubmit_UpdateQuestionSubmitById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionSubmitUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionSubmitServer).UpdateQuestionSubmitById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionSubmit_UpdateQuestionSubmitById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionSubmitServer).UpdateQuestionSubmitById(ctx, req.(*QuestionSubmitUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionSubmit_ServiceDesc is the grpc.ServiceDesc for QuestionSubmit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionSubmit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.questionSubmit",
	HandlerType: (*QuestionSubmitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "doQuestionSubmit",
			Handler:    _QuestionSubmit_DoQuestionSubmit_Handler,
		},
		{
			MethodName: "queryQuestionSubmit",
			Handler:    _QuestionSubmit_QueryQuestionSubmit_Handler,
		},
		{
			MethodName: "queryQuestionSubmitById",
			Handler:    _QuestionSubmit_QueryQuestionSubmitById_Handler,
		},
		{
			MethodName: "updateQuestionSubmitById",
			Handler:    _QuestionSubmit_UpdateQuestionSubmitById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/question.proto",
}
