// Code generated by goctl. DO NOT EDIT.
package types

type JudgeCase struct {
	Input  string `json:"input"`
	Output string `json:"output"`
}

type JudgeConfig struct {
	TimeLimit   int64 `json:"timeLimit"`
	MemoryLimit int64 `json:"memoryLimit"`
}

type QuestionVO struct {
	Id          string   `json:"id"`
	Title       string   `json:"title"`
	Content     string   `json:"content"`
	Tags        []string `json:"tags"`
	Answer      string   `json:"answer"`
	SubmitNum   int64    `json:"submitNum"`
	AcceptedNum int64    `json:"acceptedNum"`
	JudgeConfig string   `json:"judgeConfig"`
	JudgeCase   string   `json:"judgeCase"`
	UserId      int64    `json:"userId"`
	CreateTime  int64    `json:"createTime"`
	UpdateTime  int64    `json:"updateTime"`
}

type CreateQuestionReq struct {
	Authorization string      `header:"authorization"`
	Title         string      `json:"title"`
	Content       string      `json:"content"`
	Tags          []string    `json:"tags"`
	Answer        string      `json:"answer"`
	JudgeCase     []JudgeCase `json:"judgeCase"`
	JudgeConfig   JudgeConfig `json:"judgeConfig"`
}

type CreateQuestionResp struct {
	Id string `json:"id"`
}

type UpdateQuestionReq struct {
	Authorization string       `header:"authorization"`
	Id            string       `json:"id"`
	Title         string       `json:"title,optional"`
	Content       string       `json:"content,optional"`
	Tags          []string     `json:"tags,optional"`
	Answer        string       `json:"answer,optional"`
	JudgeCase     []JudgeCase  `json:"judgeCase,optional"`
	JudgeConfig   *JudgeConfig `json:"judgeConfig,optional"`
}

type UpdateQuestionResp struct {
	IsUpdated bool `json:"isUpdated"`
}

type DeleteQuestionReq struct {
	Authorization string `header:"authorization"`
	Id            string `json:"id"`
}

type DeleteQuestionResp struct {
	IsDeleted bool `json:"isDeleted"`
}

type GetQuestionReq struct {
	Id string `form:"id"`
}

type GetQuestionResp struct {
	Question QuestionVO `json:"question"`
}

type GetQuestionListReq struct {
	Current   int64    `form:"current"`
	PageSize  int64    `form:"pageSize"`
	SortField string   `form:"sortField,optional"`
	SortOrder string   `form:"sortOrder,optional"`
	Title     string   `form:"title,optional"`
	Tags      []string `form:"tags,optional"`
}

type GetQuestionListResp struct {
	QuestionList []QuestionVO `json:"questionList"`
	Total        int64        `json:"total"`
}

type JudgeInfo struct {
	Message string `json:"message"`
	Time    int64  `json:"time"`
	Memory  int64  `json:"memory"`
}

type QuestionSubmitVO struct {
	Id         string    `json:"id"`
	Language   string    `json:"language"`
	SubmitCode string    `json:"submitCode"`
	JudgeInfo  JudgeInfo `json:"judgeInfo"`
	Status     int64     `json:"status"`
	QuestionId string    `json:"questionId"`
	UserId     int64     `json:"userId"`
	CreateTime int64     `json:"createTime"`
	UpdateTime int64     `json:"updateTime"`
}

type CreateQuestionSubmitReq struct {
	Authorization string `header:"authorization"`
	Language      string `json:"language"`
	SubmitCode    string `json:"submitCode"`
	QuestionId    string `json:"questionId"`
}

type CreateQuestionSubmitResp struct {
	Id string `json:"id"`
}

type QueryQuestionSubmitReq struct {
	Authorization string `header:"authorization"`
	Current       int64  `form:"current"`
	PageSize      int64  `form:"pageSize"`
	SortField     string `form:"sortField,optional"`
	SortOrder     string `form:"sortOrder,optional"`
	Language      string `form:"language,optional"`
	Status        int64  `form:"status,optional"`
	QuestionId    string `form:"questionId,optional"`
	UserId        int64  `form:"userId,optional"`
}

type QueryQuestionSubmitResp struct {
	QuestionSubmitList []QuestionSubmitVO `json:"questionSubmitList"`
	TotalNum           int64              `json:"totalNum"`
}
