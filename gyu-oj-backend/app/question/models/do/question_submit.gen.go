// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package do

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gyu-oj-backend/app/question/models/entity"
)

func newQuestionSubmit(db *gorm.DB, opts ...gen.DOOption) questionSubmit {
	_questionSubmit := questionSubmit{}

	_questionSubmit.questionSubmitDo.UseDB(db, opts...)
	_questionSubmit.questionSubmitDo.UseModel(&entity.QuestionSubmit{})

	tableName := _questionSubmit.questionSubmitDo.TableName()
	_questionSubmit.ALL = field.NewAsterisk(tableName)
	_questionSubmit.ID = field.NewInt64(tableName, "id")
	_questionSubmit.Language = field.NewString(tableName, "language")
	_questionSubmit.SubmitCode = field.NewString(tableName, "submitCode")
	_questionSubmit.JudgeInfo = field.NewString(tableName, "judgeInfo")
	_questionSubmit.Status = field.NewInt64(tableName, "status")
	_questionSubmit.QuestionID = field.NewInt64(tableName, "questionId")
	_questionSubmit.UserID = field.NewInt64(tableName, "userId")
	_questionSubmit.CreateTime = field.NewTime(tableName, "createTime")
	_questionSubmit.UpdateTime = field.NewTime(tableName, "updateTime")
	_questionSubmit.IsDelete = field.NewInt64(tableName, "isDelete")

	_questionSubmit.fillFieldMap()

	return _questionSubmit
}

// questionSubmit 题目提交表
type questionSubmit struct {
	questionSubmitDo

	ALL        field.Asterisk
	ID         field.Int64  // id
	Language   field.String // 编程语言
	SubmitCode field.String // 用户提交的代码
	JudgeInfo  field.String // 判题信息（json 对象）
	Status     field.Int64  // 判题状态（0 - 待判题、1 - 判题中、2 - 成功、3 - 失败）
	QuestionID field.Int64  // 题目 id
	UserID     field.Int64  // 创建用户 id
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	IsDelete   field.Int64  // 是否删除

	fieldMap map[string]field.Expr
}

func (q questionSubmit) Table(newTableName string) *questionSubmit {
	q.questionSubmitDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q questionSubmit) As(alias string) *questionSubmit {
	q.questionSubmitDo.DO = *(q.questionSubmitDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *questionSubmit) updateTableName(table string) *questionSubmit {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewInt64(table, "id")
	q.Language = field.NewString(table, "language")
	q.SubmitCode = field.NewString(table, "submitCode")
	q.JudgeInfo = field.NewString(table, "judgeInfo")
	q.Status = field.NewInt64(table, "status")
	q.QuestionID = field.NewInt64(table, "questionId")
	q.UserID = field.NewInt64(table, "userId")
	q.CreateTime = field.NewTime(table, "createTime")
	q.UpdateTime = field.NewTime(table, "updateTime")
	q.IsDelete = field.NewInt64(table, "isDelete")

	q.fillFieldMap()

	return q
}

func (q *questionSubmit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *questionSubmit) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 10)
	q.fieldMap["id"] = q.ID
	q.fieldMap["language"] = q.Language
	q.fieldMap["submitCode"] = q.SubmitCode
	q.fieldMap["judgeInfo"] = q.JudgeInfo
	q.fieldMap["status"] = q.Status
	q.fieldMap["questionId"] = q.QuestionID
	q.fieldMap["userId"] = q.UserID
	q.fieldMap["createTime"] = q.CreateTime
	q.fieldMap["updateTime"] = q.UpdateTime
	q.fieldMap["isDelete"] = q.IsDelete
}

func (q questionSubmit) clone(db *gorm.DB) questionSubmit {
	q.questionSubmitDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q questionSubmit) replaceDB(db *gorm.DB) questionSubmit {
	q.questionSubmitDo.ReplaceDB(db)
	return q
}

type questionSubmitDo struct{ gen.DO }

type IQuestionSubmitDo interface {
	gen.SubQuery
	Debug() IQuestionSubmitDo
	WithContext(ctx context.Context) IQuestionSubmitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuestionSubmitDo
	WriteDB() IQuestionSubmitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuestionSubmitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuestionSubmitDo
	Not(conds ...gen.Condition) IQuestionSubmitDo
	Or(conds ...gen.Condition) IQuestionSubmitDo
	Select(conds ...field.Expr) IQuestionSubmitDo
	Where(conds ...gen.Condition) IQuestionSubmitDo
	Order(conds ...field.Expr) IQuestionSubmitDo
	Distinct(cols ...field.Expr) IQuestionSubmitDo
	Omit(cols ...field.Expr) IQuestionSubmitDo
	Join(table schema.Tabler, on ...field.Expr) IQuestionSubmitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionSubmitDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuestionSubmitDo
	Group(cols ...field.Expr) IQuestionSubmitDo
	Having(conds ...gen.Condition) IQuestionSubmitDo
	Limit(limit int) IQuestionSubmitDo
	Offset(offset int) IQuestionSubmitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionSubmitDo
	Unscoped() IQuestionSubmitDo
	Create(values ...*entity.QuestionSubmit) error
	CreateInBatches(values []*entity.QuestionSubmit, batchSize int) error
	Save(values ...*entity.QuestionSubmit) error
	First() (*entity.QuestionSubmit, error)
	Take() (*entity.QuestionSubmit, error)
	Last() (*entity.QuestionSubmit, error)
	Find() ([]*entity.QuestionSubmit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.QuestionSubmit, err error)
	FindInBatches(result *[]*entity.QuestionSubmit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.QuestionSubmit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuestionSubmitDo
	Assign(attrs ...field.AssignExpr) IQuestionSubmitDo
	Joins(fields ...field.RelationField) IQuestionSubmitDo
	Preload(fields ...field.RelationField) IQuestionSubmitDo
	FirstOrInit() (*entity.QuestionSubmit, error)
	FirstOrCreate() (*entity.QuestionSubmit, error)
	FindByPage(offset int, limit int) (result []*entity.QuestionSubmit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuestionSubmitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q questionSubmitDo) Debug() IQuestionSubmitDo {
	return q.withDO(q.DO.Debug())
}

func (q questionSubmitDo) WithContext(ctx context.Context) IQuestionSubmitDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q questionSubmitDo) ReadDB() IQuestionSubmitDo {
	return q.Clauses(dbresolver.Read)
}

func (q questionSubmitDo) WriteDB() IQuestionSubmitDo {
	return q.Clauses(dbresolver.Write)
}

func (q questionSubmitDo) Session(config *gorm.Session) IQuestionSubmitDo {
	return q.withDO(q.DO.Session(config))
}

func (q questionSubmitDo) Clauses(conds ...clause.Expression) IQuestionSubmitDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q questionSubmitDo) Returning(value interface{}, columns ...string) IQuestionSubmitDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q questionSubmitDo) Not(conds ...gen.Condition) IQuestionSubmitDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q questionSubmitDo) Or(conds ...gen.Condition) IQuestionSubmitDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q questionSubmitDo) Select(conds ...field.Expr) IQuestionSubmitDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q questionSubmitDo) Where(conds ...gen.Condition) IQuestionSubmitDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q questionSubmitDo) Order(conds ...field.Expr) IQuestionSubmitDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q questionSubmitDo) Distinct(cols ...field.Expr) IQuestionSubmitDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q questionSubmitDo) Omit(cols ...field.Expr) IQuestionSubmitDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q questionSubmitDo) Join(table schema.Tabler, on ...field.Expr) IQuestionSubmitDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q questionSubmitDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuestionSubmitDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q questionSubmitDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuestionSubmitDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q questionSubmitDo) Group(cols ...field.Expr) IQuestionSubmitDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q questionSubmitDo) Having(conds ...gen.Condition) IQuestionSubmitDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q questionSubmitDo) Limit(limit int) IQuestionSubmitDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q questionSubmitDo) Offset(offset int) IQuestionSubmitDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q questionSubmitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuestionSubmitDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q questionSubmitDo) Unscoped() IQuestionSubmitDo {
	return q.withDO(q.DO.Unscoped())
}

func (q questionSubmitDo) Create(values ...*entity.QuestionSubmit) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q questionSubmitDo) CreateInBatches(values []*entity.QuestionSubmit, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q questionSubmitDo) Save(values ...*entity.QuestionSubmit) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q questionSubmitDo) First() (*entity.QuestionSubmit, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuestionSubmit), nil
	}
}

func (q questionSubmitDo) Take() (*entity.QuestionSubmit, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuestionSubmit), nil
	}
}

func (q questionSubmitDo) Last() (*entity.QuestionSubmit, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuestionSubmit), nil
	}
}

func (q questionSubmitDo) Find() ([]*entity.QuestionSubmit, error) {
	result, err := q.DO.Find()
	return result.([]*entity.QuestionSubmit), err
}

func (q questionSubmitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.QuestionSubmit, err error) {
	buf := make([]*entity.QuestionSubmit, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q questionSubmitDo) FindInBatches(result *[]*entity.QuestionSubmit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q questionSubmitDo) Attrs(attrs ...field.AssignExpr) IQuestionSubmitDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q questionSubmitDo) Assign(attrs ...field.AssignExpr) IQuestionSubmitDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q questionSubmitDo) Joins(fields ...field.RelationField) IQuestionSubmitDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q questionSubmitDo) Preload(fields ...field.RelationField) IQuestionSubmitDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q questionSubmitDo) FirstOrInit() (*entity.QuestionSubmit, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuestionSubmit), nil
	}
}

func (q questionSubmitDo) FirstOrCreate() (*entity.QuestionSubmit, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuestionSubmit), nil
	}
}

func (q questionSubmitDo) FindByPage(offset int, limit int) (result []*entity.QuestionSubmit, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q questionSubmitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q questionSubmitDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q questionSubmitDo) Delete(models ...*entity.QuestionSubmit) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *questionSubmitDo) withDO(do gen.Dao) *questionSubmitDo {
	q.DO = *do.(*gen.DO)
	return q
}
