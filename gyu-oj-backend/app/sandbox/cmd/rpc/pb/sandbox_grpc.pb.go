// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: pb/sandbox.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CodeSandbox_ExecuteCode_FullMethodName = "/pb.codeSandbox/executeCode"
)

// CodeSandboxClient is the client API for CodeSandbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeSandboxClient interface {
	ExecuteCode(ctx context.Context, in *ExecuteCodeReq, opts ...grpc.CallOption) (*ExecuteCodeResp, error)
}

type codeSandboxClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeSandboxClient(cc grpc.ClientConnInterface) CodeSandboxClient {
	return &codeSandboxClient{cc}
}

func (c *codeSandboxClient) ExecuteCode(ctx context.Context, in *ExecuteCodeReq, opts ...grpc.CallOption) (*ExecuteCodeResp, error) {
	out := new(ExecuteCodeResp)
	err := c.cc.Invoke(ctx, CodeSandbox_ExecuteCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeSandboxServer is the server API for CodeSandbox service.
// All implementations must embed UnimplementedCodeSandboxServer
// for forward compatibility
type CodeSandboxServer interface {
	ExecuteCode(context.Context, *ExecuteCodeReq) (*ExecuteCodeResp, error)
	mustEmbedUnimplementedCodeSandboxServer()
}

// UnimplementedCodeSandboxServer must be embedded to have forward compatible implementations.
type UnimplementedCodeSandboxServer struct {
}

func (UnimplementedCodeSandboxServer) ExecuteCode(context.Context, *ExecuteCodeReq) (*ExecuteCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCode not implemented")
}
func (UnimplementedCodeSandboxServer) mustEmbedUnimplementedCodeSandboxServer() {}

// UnsafeCodeSandboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeSandboxServer will
// result in compilation errors.
type UnsafeCodeSandboxServer interface {
	mustEmbedUnimplementedCodeSandboxServer()
}

func RegisterCodeSandboxServer(s grpc.ServiceRegistrar, srv CodeSandboxServer) {
	s.RegisterService(&CodeSandbox_ServiceDesc, srv)
}

func _CodeSandbox_ExecuteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeSandboxServer).ExecuteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeSandbox_ExecuteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeSandboxServer).ExecuteCode(ctx, req.(*ExecuteCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeSandbox_ServiceDesc is the grpc.ServiceDesc for CodeSandbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeSandbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.codeSandbox",
	HandlerType: (*CodeSandboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "executeCode",
			Handler:    _CodeSandbox_ExecuteCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/sandbox.proto",
}
